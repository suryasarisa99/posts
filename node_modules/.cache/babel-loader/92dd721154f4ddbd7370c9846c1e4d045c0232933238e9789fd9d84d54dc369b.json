{"ast":null,"code":"var _jsxFileName = \"/home/surya/ws/node/posts/client/src/pages/Discover.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useState, useEffect, useContext, useReducer } from \"react\";\nimport immer from \"immer\";\nimport Post from \"../components/Post\";\nimport authContext from \"../context/authContext\";\n// let SERVER_URI = \"http://192.168.0.169:3000\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet SERVER_URI = process.env.REACT_APP_SERVER_URI;\nexport default function Discover() {\n  _s();\n  var _state$posts;\n  let {\n    logined\n  } = useContext(authContext);\n  function reducer(state, action) {\n    if (action.type === \"updateImg\") {\n      state.posts[action.index].imageUrl = action.payload;\n    } else if (action.type === \"setPosts\") {\n      state.posts = action.payload;\n    }\n  }\n  const [state, dispatch] = useReducer(immer(reducer), {\n    posts: []\n  });\n  useEffect(() => {\n    getPosts();\n  }, []);\n  function getPosts() {\n    axios.get(`${SERVER_URI}/p/all-posts`, {\n      withCredentials: true\n    }).then(res => {\n      dispatch({\n        type: \"setPosts\",\n        payload: res.data.posts\n      });\n      console.log(res.data);\n      res.data.posts.forEach((post, ind) => getPostImg(post.post, ind));\n    });\n  }\n  function getPostImg(post, ind) {\n    const id = post.split(\"/\").pop();\n    axios.get(`${SERVER_URI}/p/post-img/${id}`, {\n      withCredentials: true,\n      responseType: \"blob\"\n    }).then(res => {\n      const url = URL.createObjectURL(res.data);\n      dispatch({\n        type: \"updateImg\",\n        payload: url,\n        index: ind\n      });\n    });\n  }\n  return (_state$posts = state.posts) === null || _state$posts === void 0 ? void 0 : _state$posts.map((post, ind) => {\n    return /*#__PURE__*/_jsxDEV(Post, {\n      post: post,\n      logined: logined,\n      getPosts: getPosts\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  });\n}\n_s(Discover, \"I0jrPZ8qEnGzQ1d4XmjK4gGTWHQ=\");\n_c = Discover;\nvar _c;\n$RefreshReg$(_c, \"Discover\");","map":{"version":3,"names":["axios","useState","useEffect","useContext","useReducer","immer","Post","authContext","jsxDEV","_jsxDEV","SERVER_URI","process","env","REACT_APP_SERVER_URI","Discover","_s","_state$posts","logined","reducer","state","action","type","posts","index","imageUrl","payload","dispatch","getPosts","get","withCredentials","then","res","data","console","log","forEach","post","ind","getPostImg","id","split","pop","responseType","url","URL","createObjectURL","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/surya/ws/node/posts/client/src/pages/Discover.js"],"sourcesContent":["import axios from \"axios\";\nimport { useState, useEffect, useContext, useReducer } from \"react\";\nimport immer from \"immer\";\nimport Post from \"../components/Post\";\nimport authContext from \"../context/authContext\";\n// let SERVER_URI = \"http://192.168.0.169:3000\";\nlet SERVER_URI = process.env.REACT_APP_SERVER_URI;\nexport default function Discover() {\n  let { logined } = useContext(authContext);\n\n  function reducer(state, action) {\n    if (action.type === \"updateImg\") {\n      state.posts[action.index].imageUrl = action.payload;\n    } else if (action.type === \"setPosts\") {\n      state.posts = action.payload;\n    }\n  }\n\n  const [state, dispatch] = useReducer(immer(reducer), {\n    posts: [],\n  });\n  useEffect(() => {\n    getPosts();\n  }, []);\n\n  function getPosts() {\n    axios\n      .get(`${SERVER_URI}/p/all-posts`, {\n        withCredentials: true,\n      })\n      .then((res) => {\n        dispatch({\n          type: \"setPosts\",\n          payload: res.data.posts,\n        });\n        console.log(res.data);\n        res.data.posts.forEach((post, ind) => getPostImg(post.post, ind));\n      });\n  }\n\n  function getPostImg(post, ind) {\n    const id = post.split(\"/\").pop();\n    axios\n      .get(`${SERVER_URI}/p/post-img/${id}`, {\n        withCredentials: true,\n        responseType: \"blob\",\n      })\n      .then((res) => {\n        const url = URL.createObjectURL(res.data);\n        dispatch({\n          type: \"updateImg\",\n          payload: url,\n          index: ind,\n        });\n      });\n  }\n\n  return state.posts?.map((post, ind) => {\n    return (\n      <Post post={post} logined={logined} getPosts={getPosts} key={post.id} />\n    );\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}